{"ast":null,"code":"'use strict';\n\n(function () {\n  var instance = null;\n  var instancesCount = 0;\n  var ticking = false;\n  var EVENT_NAME = 'window-scroll';\n  var isWindowDefined = typeof window !== 'undefined'; // ------------------------------------------------\n  // Passive events support detection\n  // ------------------------------------------------\n\n  function detectPassiveEvents() {\n    if (isWindowDefined && typeof window.addEventListener === 'function') {\n      var passive = false;\n      var options = Object.defineProperty({}, 'passive', {\n        get: function () {\n          passive = true;\n        }\n      }); // note: have to set and remove a no-op listener instead of null\n      // (which was used previously), because Edge v15 throws an error\n      // when providing a null callback.\n      // https://github.com/rafrex/detect-passive-events/pull/3\n\n      var noop = function () {};\n\n      window.addEventListener('TEST_PASSIVE_EVENT_SUPPORT', noop, options);\n      window.removeEventListener('TEST_PASSIVE_EVENT_SUPPORT', noop, options);\n      return passive;\n    }\n\n    return false;\n  }\n\n  var supportsPassiveEvents = detectPassiveEvents(); // ------------------------------------------------\n  // Custom Event detection\n  // ------------------------------------------------\n\n  var supportsCustomEvents = isWindowDefined && typeof window.CustomEvent === 'function'; // ------------------------------------------------\n  // Scroll manager\n  // ------------------------------------------------\n\n  function ScrollManager() {\n    if (typeof window === 'undefined') {\n      // Silently return null if it is used on server\n      return null;\n    } // Increase reference count\n\n\n    instancesCount++; // If singleton instance exists, return it rather than creating a new one\n\n    if (instance) {\n      return instance;\n    } // Save singleton instance\n\n\n    instance = this; // Bind handlers\n\n    this.handleScroll = this.handleScroll.bind(this); // Use passive listener when supported with fallback to capture option\n\n    this.eventListenerOptions = supportsPassiveEvents ? {\n      passive: true\n    } : true; // Add scroll listener\n\n    window.addEventListener('scroll', this.handleScroll, this.eventListenerOptions);\n  }\n\n  ScrollManager.prototype.removeListener = function () {\n    instancesCount--; // There is not components listening to our event\n\n    if (instancesCount === 0) {\n      this.destroy();\n    }\n  };\n\n  ScrollManager.prototype.destroy = function () {\n    // Remove event listener\n    window.removeEventListener('scroll', this.handleScroll, this.eventListenerOptions); // Clear singleton instance and count\n\n    instance = null;\n    instancesCount = 0;\n  };\n\n  ScrollManager.prototype.getScrollPosition = function () {\n    // Get scroll position, with IE fallback\n    var scrollPositionY = window.scrollY || document.documentElement.scrollTop;\n    var scrollPositionX = window.scrollX || document.documentElement.scrollLeft; // Disable overscrolling in safari\n\n    if (scrollPositionY < 0) {\n      scrollPositionY = 0;\n    }\n\n    if (scrollPositionX < 0) {\n      scrollPositionX = 0;\n    }\n\n    return {\n      // Alias for scrollPositionY for backwards compatibility\n      scrollPosition: scrollPositionY,\n      scrollPositionY: scrollPositionY,\n      scrollPositionX: scrollPositionX\n    };\n  };\n\n  ScrollManager.prototype.handleScroll = function () {\n    // Fire the event only once per requestAnimationFrame\n    if (!ticking) {\n      ticking = true;\n      var event;\n\n      if (supportsCustomEvents) {\n        event = new CustomEvent(EVENT_NAME, {\n          detail: this.getScrollPosition()\n        });\n      } else {\n        event = document.createEvent('CustomEvent');\n        event.initCustomEvent(EVENT_NAME, false, false, this.getScrollPosition());\n      }\n\n      window.dispatchEvent(event);\n      window.requestAnimationFrame(function () {\n        ticking = false;\n      });\n    }\n  };\n\n  if (typeof module !== 'undefined' && module.exports) {\n    ScrollManager.default = ScrollManager;\n    module.exports = ScrollManager;\n  } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n    // eslint-disable-line no-undef\n    // register as 'window-scroll-manager', consistent with npm package name\n    define('window-scroll-manager', [], function () {\n      // eslint-disable-line no-undef\n      return ScrollManager;\n    });\n  } else {\n    window.ScrollManager = ScrollManager;\n  }\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}