{"ast":null,"code":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\n/* global window, document, setTimeout */\nimport clone from 'lodash/clone';\nimport throttle from 'lodash/throttle';\nimport noop from 'lodash/noop';\nimport AugmentedEvent from './AugmentedEvent';\nimport globalVars from './globalVars';\nimport leIE8 from './lib/leIE8';\nimport listen from './lib/listen';\nimport rAFThrottle from './lib/rAFThrottle'; // constants\n\nimport { EVENT_END_DELAY } from './constants';\nvar connections = globalVars.connections,\n    EE = globalVars.EE,\n    listeners = globalVars.listeners,\n    removers = globalVars.removers; // global variables\n\nvar doc = void 0;\nvar win = void 0;\nvar body = void 0;\nvar hashId = 0;\n\nif (typeof window !== 'undefined') {\n  win = window;\n  doc = win.document || document;\n  body = doc.body;\n}\n\nfunction getHash(domNode) {\n  return domNode.id || 'target-id-' + hashId++; // eslint-disable-line\n}\n/**\n * Connect a throttled event to a throttled main event, and return an event remover.\n * The number of connections to a throttled main event will be kept. If all throttled events\n * are removed, then remove throttled main event.\n * @method connectThrottle\n * @param {String} throttledEvent - A throttled event\n * @param {Function} cb - Callback function\n * @param {Object} ctx - The \"this\"\n * @param {String} throttledMainEvent - A throttled main event\n * @return {Object} An event remover\n */\n\n\nfunction connectThrottle(throttledEvent, cb, ctx, throttledMainEvent) {\n  EE.on(throttledEvent, cb || noop, ctx);\n  throttledMainEvent = throttledMainEvent || throttledEvent;\n  connections[throttledMainEvent] = (connections[throttledMainEvent] || 0) + 1;\n  return {\n    _type: throttledEvent,\n    _cb: cb,\n    _ctx: ctx,\n    unsubscribe: function unsubscribe() {\n      if (!this._type) {\n        return;\n      }\n\n      EE.removeListener(throttledEvent, cb, ctx);\n      connections[throttledMainEvent]--;\n\n      if (connections[throttledMainEvent] === 0) {\n        listeners[throttledMainEvent].remove();\n        listeners[throttledMainEvent] = undefined;\n      }\n\n      this._type = undefined;\n      this._cb = undefined;\n      this._ctx = undefined; // remove the remover from removers array\n\n      for (var i = removers.length - 1; i >= 0; i--) {\n        var remover = removers[i];\n\n        if (remover === this) {\n          removers.splice(i, 1);\n          break;\n        }\n      }\n    }\n  };\n}\n/**\n * Connect to event, event start and event end.\n * @method connectContinuousEvent\n * @param {Object} target - The target of a main event, window or document.\n * @param {String} mainEvent - A browser event, like scroll or resize.\n * @param {String} event - A subscribe event.\n * @param {Object} eventOptions - An options pass to event listener\n */\n\n\nfunction connectContinuousEvent(target, mainEvent, event) {\n  return function throttleEvent(throttleRate, cb, options, eventOptions) {\n    var context = options.context;\n    var domTarget = options.target;\n    var domId = domTarget && getHash(domTarget);\n    var targetPart = domId ? ':' + domId : '';\n    var throttledStartEvent = mainEvent + 'Start:' + throttleRate + targetPart;\n    var throttledEndEvent = mainEvent + 'End:' + throttleRate + targetPart;\n    var throttledMainEvent = mainEvent + ':' + throttleRate + targetPart;\n    var throttledEvent = event + ':' + throttleRate + targetPart;\n    var remover = connectThrottle(throttledEvent, cb, context, throttledMainEvent);\n    removers.push(remover);\n\n    if (listeners[throttledMainEvent]) {\n      return remover;\n    }\n\n    var ae = {\n      start: new AugmentedEvent({\n        mainType: mainEvent,\n        subType: 'start'\n      }),\n      // start\n      main: new AugmentedEvent({\n        mainType: mainEvent\n      }),\n      // main\n      end: new AugmentedEvent({\n        mainType: mainEvent,\n        subType: 'end'\n      })\n    }; // No throttle for throttleRate = 0\n    // end\n\n    if (throttleRate === 'raf') {\n      throttleRate = 16; // Set as a number for setTimeout later.\n\n      handler = rAFThrottle(handler);\n    } else if (throttleRate > 0) {\n      handler = throttle(handler, throttleRate);\n    }\n\n    var timer = void 0;\n\n    function endCallback(e) {\n      ae.end.update(e);\n      EE.emit(throttledEndEvent, e, ae.end);\n      timer = null;\n    }\n\n    function handler(e) {\n      if (!timer) {\n        ae.start.update(e);\n        EE.emit(throttledStartEvent, e, ae.start);\n      }\n\n      clearTimeout(timer);\n      ae.main.update(e);\n      EE.emit(throttledMainEvent, e, ae.main);\n\n      if (!leIE8) {\n        timer = setTimeout(endCallback.bind(null, e), throttleRate + EVENT_END_DELAY);\n      } else {\n        // For browser less then and equal to IE8, event object need to be cloned for setTimeout.\n        timer = setTimeout(function () {\n          endCallback(clone(e));\n        }, throttleRate + EVENT_END_DELAY);\n      }\n    }\n\n    listeners[throttledMainEvent] = listen(domTarget || target, mainEvent, handler, eventOptions);\n    return remover;\n  };\n}\n\nfunction connectDiscreteEvent(target, event) {\n  return function throttleEvent(throttleRate, cb, options, eventOptions) {\n    var context = options.context;\n    var domTarget = options.target;\n    var domId = domTarget && getHash(domTarget); // no throttling for discrete event\n\n    var throttledEvent = event + ':0' + (domId ? ':' + domId : '');\n    var remover = connectThrottle(throttledEvent, cb, context);\n    removers.push(remover);\n\n    if (listeners[throttledEvent]) {\n      return remover;\n    }\n\n    var ae = new AugmentedEvent({\n      mainType: event\n    });\n\n    function handler(e) {\n      ae.update(e);\n      EE.emit(throttledEvent, e, ae);\n    }\n\n    listeners[throttledEvent] = listen(domTarget || target, event, handler, eventOptions);\n    return remover;\n  };\n}\n\nexport default {\n  scrollStart: connectContinuousEvent(win, 'scroll', 'scrollStart'),\n  scrollEnd: connectContinuousEvent(win, 'scroll', 'scrollEnd'),\n  scroll: connectContinuousEvent(win, 'scroll', 'scroll'),\n  resizeStart: connectContinuousEvent(win, 'resize', 'resizeStart'),\n  resizeEnd: connectContinuousEvent(win, 'resize', 'resizeEnd'),\n  resize: connectContinuousEvent(win, 'resize', 'resize'),\n  visibilitychange: connectDiscreteEvent(doc, 'visibilitychange'),\n  touchmoveStart: connectContinuousEvent(body, 'touchmove', 'touchmoveStart'),\n  touchmoveEnd: connectContinuousEvent(body, 'touchmove', 'touchmoveEnd'),\n  touchmove: connectContinuousEvent(body, 'touchmove', 'touchmove'),\n  touchstart: connectDiscreteEvent(body, 'touchstart'),\n  touchend: connectDiscreteEvent(body, 'touchend')\n};","map":null,"metadata":{},"sourceType":"module"}